import Restaurant.*;
import org.omg.CosNaming.NamingContextPackage.*;
import org.omg.PortableServer.*;
import org.omg.PortableServer.POA;
import org.omg.CORBA.*;
import org.omg.CosNaming.*;
import java.util.Properties;

public class RestaurantServer {
    public static void main(String[] args) {
        try {
            // Create and initialize the ORB
            ORB orb = ORB.init(args, null);

            // get reference to rootpoa & activate the POAManager
           POA rootpoa = POAHelper.narrow(orb.resolve_initial_references("RootPOA"));
           rootpoa.the_POAManager().activate();
        


            // Create a new instance of the restaurant implementation
            RestaurantImpl restaurant = new RestaurantImpl();

            // Connect the implementation with the ORB
            restaurant.setORB(orb);
            
      // get object reference from the servant
      org.omg.CORBA.Object ref = rootpoa.servant_to_reference(RestaurantImpl);
      restaurant href = restuarantHelper.narrow(ref);

            // Get the root naming context
            org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");
            NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);

            // Bind the restaurant implementation to the naming service
            String name = "Restaurant";
            NameComponent[] path = ncRef.to_name(name);
            ncRef.rebind(path, restaurant);

            // Start the server
            System.out.println("Restaurant server ready and waiting ...");
            orb.run();
        } catch (Exception e) {
            System.err.println("ERROR: " + e);
            e.printStackTrace(System.out);
        }
    }
}

class RestaurantImpl extends RestaurantPOA {
    private ORB orb;
    public void setORB(ORB orb_val){
        orb = orb_val;
    }
    private long chickenPrice = 5;
    private long colaPrice = 1;
    private OrderStatus[] orders = new OrderStatus[0];

    public String[] getMenu() {
        return new String[] {
            "Fried chicken - $" + chickenPrice,
            "Cola - $" + colaPrice
        };
    }

    public String placeOrder(String customerName, long chickenQuantity, long colaQuantity) throws InvalidQuantity {
        if (chickenQuantity < 0 || colaQuantity < 0) {
            throw new InvalidQuantity("Invalid quantity");
        }

        double totalCost = (chickenQuantity * chickenPrice) + (colaQuantity * colaPrice);
        OrderStatus order = new OrderStatus(customerName, chickenQuantity, colaQuantity, totalCost);

        // Add the new order to the orders array
        OrderStatus[] newOrders = new OrderStatus[orders.length + 1];
        System.arraycopy(orders, 0, newOrders, 0, orders.length);
        newOrders[orders.length] = order;
        orders = newOrders;

        return "Order received";
    }

    public OrderStatus getOrderStatus(String customerName) {
        for (OrderStatus order : orders) {
            if (order.customerName.equals(customerName)) {
                return order;
            }
        }

        return null;
    }

    public OrderStatus[] getCurrentOrders() {
        return orders;
    }
}
